// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.17.3
// source: charactor.data.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ----------------- 职业 -----------------
type RoleType int32

const (
	RoleType_RoleTypeInvalid  RoleType = 0
	RoleType_RoleTypeWarrior  RoleType = 1 // 战士, TANK, 近战
	RoleType_RoleTypeStriker  RoleType = 2 // 射手, 远程物理 弓 + 弩
	RoleType_RoleTypeAssassin RoleType = 3 // 刺客, 近战 + 陷阱
	RoleType_RoleTypeMage     RoleType = 4 // 法师, 远程法术
	RoleType_RoleTypeWarlock  RoleType = 5 // 术士, 召唤 + 控制
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "RoleTypeInvalid",
		1: "RoleTypeWarrior",
		2: "RoleTypeStriker",
		3: "RoleTypeAssassin",
		4: "RoleTypeMage",
		5: "RoleTypeWarlock",
	}
	RoleType_value = map[string]int32{
		"RoleTypeInvalid":  0,
		"RoleTypeWarrior":  1,
		"RoleTypeStriker":  2,
		"RoleTypeAssassin": 3,
		"RoleTypeMage":     4,
		"RoleTypeWarlock":  5,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_charactor_data_proto_enumTypes[0].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_charactor_data_proto_enumTypes[0]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{0}
}

// ----------------- 护甲类型 -----------------
type ArmorType int32

const (
	ArmorType_ArmorTypeInvalid   ArmorType = 0
	ArmorType_ArmorTypePlate     ArmorType = 1 // 板甲
	ArmorType_ArmorTypeMail      ArmorType = 2 // 锁甲
	ArmorType_ArmorTypeLeather   ArmorType = 3 // 皮甲
	ArmorType_ArmorTypeCloth     ArmorType = 4 // 布甲
	ArmorType_ArmorTypeUnarmored ArmorType = 5 // 无甲
)

// Enum value maps for ArmorType.
var (
	ArmorType_name = map[int32]string{
		0: "ArmorTypeInvalid",
		1: "ArmorTypePlate",
		2: "ArmorTypeMail",
		3: "ArmorTypeLeather",
		4: "ArmorTypeCloth",
		5: "ArmorTypeUnarmored",
	}
	ArmorType_value = map[string]int32{
		"ArmorTypeInvalid":   0,
		"ArmorTypePlate":     1,
		"ArmorTypeMail":      2,
		"ArmorTypeLeather":   3,
		"ArmorTypeCloth":     4,
		"ArmorTypeUnarmored": 5,
	}
)

func (x ArmorType) Enum() *ArmorType {
	p := new(ArmorType)
	*p = x
	return p
}

func (x ArmorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmorType) Descriptor() protoreflect.EnumDescriptor {
	return file_charactor_data_proto_enumTypes[1].Descriptor()
}

func (ArmorType) Type() protoreflect.EnumType {
	return &file_charactor_data_proto_enumTypes[1]
}

func (x ArmorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmorType.Descriptor instead.
func (ArmorType) EnumDescriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{1}
}

// ----------------- 武器类型 -----------------
type WeaponType int32

const (
	WeaponType_WeaponTypeInvalid WeaponType = 0
)

// Enum value maps for WeaponType.
var (
	WeaponType_name = map[int32]string{
		0: "WeaponTypeInvalid",
	}
	WeaponType_value = map[string]int32{
		"WeaponTypeInvalid": 0,
	}
)

func (x WeaponType) Enum() *WeaponType {
	p := new(WeaponType)
	*p = x
	return p
}

func (x WeaponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponType) Descriptor() protoreflect.EnumDescriptor {
	return file_charactor_data_proto_enumTypes[2].Descriptor()
}

func (WeaponType) Type() protoreflect.EnumType {
	return &file_charactor_data_proto_enumTypes[2]
}

func (x WeaponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponType.Descriptor instead.
func (WeaponType) EnumDescriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{2}
}

// ----------------- 人物基础信息 -----------------
type CharactorBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname  string   `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`             // 昵称
	Role      RoleType `protobuf:"varint,2,opt,name=Role,proto3,enum=data.RoleType" json:"Role,omitempty"` // 职业
	Gender    uint32   `protobuf:"varint,3,opt,name=Gender,proto3" json:"Gender,omitempty"`                // 性别
	HairStyle uint32   `protobuf:"varint,4,opt,name=HairStyle,proto3" json:"HairStyle,omitempty"`          // 发型
	HairColor uint32   `protobuf:"varint,5,opt,name=HairColor,proto3" json:"HairColor,omitempty"`          // 发色
	Height    uint32   `protobuf:"varint,6,opt,name=Height,proto3" json:"Height,omitempty"`                // 身高
	BodyType  uint32   `protobuf:"varint,7,opt,name=BodyType,proto3" json:"BodyType,omitempty"`            // 体型
	SkinColor uint32   `protobuf:"varint,8,opt,name=SkinColor,proto3" json:"SkinColor,omitempty"`          // 肤色
}

func (x *CharactorBasicInfo) Reset() {
	*x = CharactorBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactorBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactorBasicInfo) ProtoMessage() {}

func (x *CharactorBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactorBasicInfo.ProtoReflect.Descriptor instead.
func (*CharactorBasicInfo) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{0}
}

func (x *CharactorBasicInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CharactorBasicInfo) GetRole() RoleType {
	if x != nil {
		return x.Role
	}
	return RoleType_RoleTypeInvalid
}

func (x *CharactorBasicInfo) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CharactorBasicInfo) GetHairStyle() uint32 {
	if x != nil {
		return x.HairStyle
	}
	return 0
}

func (x *CharactorBasicInfo) GetHairColor() uint32 {
	if x != nil {
		return x.HairColor
	}
	return 0
}

func (x *CharactorBasicInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CharactorBasicInfo) GetBodyType() uint32 {
	if x != nil {
		return x.BodyType
	}
	return 0
}

func (x *CharactorBasicInfo) GetSkinColor() uint32 {
	if x != nil {
		return x.SkinColor
	}
	return 0
}

// ----------------- 人物基础属性 -----------------
// 人物基础属性是不会变更的, 该数据将持久化存储.
type CharactorBasicAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ----- @经验值 ----
	// 由打怪或任务获得.
	// 升级时需要消耗经验值.
	EXP float64 `protobuf:"fixed64,1,opt,name=EXP,proto3" json:"EXP,omitempty"`
	// ----- @等级 -----
	//  每升一级提供 5点基础属性点, 可以自行分配到 力量,敏捷, 体力或智力上
	LEV float32 `protobuf:"fixed32,2,opt,name=LEV,proto3" json:"LEV,omitempty"`
	// ----- @耐力 -----
	//  每日的行动力, 耐力决定人物的状态,
	//  当耐力下降到一定程度的值时, 人物各项属性会按比例下降
	//  耐力值固定为100, 满级之后到达120
	//  无法通过提升等级增加耐力
	STA float32 `protobuf:"fixed32,3,opt,name=STA,proto3" json:"STA,omitempty"`
	// ----- @力量 -----
	//  增加近战/穿刺伤害,命中,招架
	//  力量是使用装备的条件
	//  等级提升时会跟据职业提升相应力量值
	STR float32 `protobuf:"fixed32,4,opt,name=STR,proto3" json:"STR,omitempty"`
	// ----- @敏捷 -----
	//  增加爆击率,爆击伤害,闪躲,急速
	//  敏捷是使用装备的条件
	//  等级提升时会跟据职业提升相应敏捷值
	AGI float32 `protobuf:"fixed32,5,opt,name=AGI,proto3" json:"AGI,omitempty"`
	// ----- @体力 -----
	//  增加生命值和韧性
	//  等级提升时会跟据职业提升相应体力值
	CON float32 `protobuf:"fixed32,6,opt,name=CON,proto3" json:"CON,omitempty"`
	// ----- @智力 -----
	//  增加法力值, 火焰伤害, 冰霜伤害, 闪电伤害, 毒素伤害和暗影伤害
	//  等级提升时会跟据职业提升相应智力值
	INT float32 `protobuf:"fixed32,7,opt,name=INT,proto3" json:"INT,omitempty"`
	// ----- @幸运 -----
	//  增加爆击率和命中率
	//  可以让伤害变为混沌伤害
	//  同时增加高级物品掉落
	//  默认为0, 可以通过技能或消耗品提升幸运
	LCK float32 `protobuf:"fixed32,8,opt,name=LCK,proto3" json:"LCK,omitempty"`
	// ----- @移动速度 -----
	//  默认为 100
	//  通过装备,技能或消耗品提升移动速度
	SP float32 `protobuf:"fixed32,9,opt,name=SP,proto3" json:"SP,omitempty"`
}

func (x *CharactorBasicAttribute) Reset() {
	*x = CharactorBasicAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactorBasicAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactorBasicAttribute) ProtoMessage() {}

func (x *CharactorBasicAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactorBasicAttribute.ProtoReflect.Descriptor instead.
func (*CharactorBasicAttribute) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{1}
}

func (x *CharactorBasicAttribute) GetEXP() float64 {
	if x != nil {
		return x.EXP
	}
	return 0
}

func (x *CharactorBasicAttribute) GetLEV() float32 {
	if x != nil {
		return x.LEV
	}
	return 0
}

func (x *CharactorBasicAttribute) GetSTA() float32 {
	if x != nil {
		return x.STA
	}
	return 0
}

func (x *CharactorBasicAttribute) GetSTR() float32 {
	if x != nil {
		return x.STR
	}
	return 0
}

func (x *CharactorBasicAttribute) GetAGI() float32 {
	if x != nil {
		return x.AGI
	}
	return 0
}

func (x *CharactorBasicAttribute) GetCON() float32 {
	if x != nil {
		return x.CON
	}
	return 0
}

func (x *CharactorBasicAttribute) GetINT() float32 {
	if x != nil {
		return x.INT
	}
	return 0
}

func (x *CharactorBasicAttribute) GetLCK() float32 {
	if x != nil {
		return x.LCK
	}
	return 0
}

func (x *CharactorBasicAttribute) GetSP() float32 {
	if x != nil {
		return x.SP
	}
	return 0
}

// ----------------- 人物状态属性 -----------------
type CharactorStateAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ----- @生命值 -----
	//  当生命值小于等于 0时, 宣布人物死亡
	//  通过基础能力点, 天赋, 装备, 技能, 消耗品提升
	HP float32 `protobuf:"fixed32,1,opt,name=HP,proto3" json:"HP,omitempty"`
	// ----- @法力值 -----
	//  法师和术士 拥有法力值
	//  用于施放法术
	//  通过基础能力点, 天赋, 装备, 技能, 消耗品提升
	MP float32 `protobuf:"fixed32,2,opt,name=MP,proto3" json:"MP,omitempty"`
	// ----- @能量值 -----
	//  射手和刺客拥有能量值
	//  用于施放技能
	//  通过天赋提升
	//  默认100, 通过天赋可以最高提升至150
	EP float32 `protobuf:"fixed32,3,opt,name=EP,proto3" json:"EP,omitempty"`
	// ----- @怒气值 -----
	//  战士拥有怒气值
	//  用于施放持能
	//  通过天赋提升,
	//  战斗中受到伤害将提升
	//  默认值100, 通过天赋可以最高提升到125
	AP float32 `protobuf:"fixed32,4,opt,name=AP,proto3" json:"AP,omitempty"`
}

func (x *CharactorStateAttribute) Reset() {
	*x = CharactorStateAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactorStateAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactorStateAttribute) ProtoMessage() {}

func (x *CharactorStateAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactorStateAttribute.ProtoReflect.Descriptor instead.
func (*CharactorStateAttribute) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{2}
}

func (x *CharactorStateAttribute) GetHP() float32 {
	if x != nil {
		return x.HP
	}
	return 0
}

func (x *CharactorStateAttribute) GetMP() float32 {
	if x != nil {
		return x.MP
	}
	return 0
}

func (x *CharactorStateAttribute) GetEP() float32 {
	if x != nil {
		return x.EP
	}
	return 0
}

func (x *CharactorStateAttribute) GetAP() float32 {
	if x != nil {
		return x.AP
	}
	return 0
}

// ----------------- 人物攻击属性 -----------------
type CharactorAttackAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Normal               float32 `protobuf:"fixed32,1,opt,name=Normal,proto3" json:"Normal,omitempty"`                              // 物理攻击
	Piercing             float32 `protobuf:"fixed32,2,opt,name=Piercing,proto3" json:"Piercing,omitempty"`                          // 穿刺伤害
	Flame                float32 `protobuf:"fixed32,3,opt,name=Flame,proto3" json:"Flame,omitempty"`                                // 火焰伤害
	Frost                float32 `protobuf:"fixed32,4,opt,name=Frost,proto3" json:"Frost,omitempty"`                                // 冰霜伤害
	Lightning            float32 `protobuf:"fixed32,5,opt,name=Lightning,proto3" json:"Lightning,omitempty"`                        // 闪电伤害
	Poison               float32 `protobuf:"fixed32,6,opt,name=Poison,proto3" json:"Poison,omitempty"`                              // 毒素伤害
	Shadow               float32 `protobuf:"fixed32,7,opt,name=Shadow,proto3" json:"Shadow,omitempty"`                              // 暗影伤害
	Chaos                float32 `protobuf:"fixed32,8,opt,name=Chaos,proto3" json:"Chaos,omitempty"`                                // 混沌伤害
	ArmorPenetration     float32 `protobuf:"fixed32,9,opt,name=ArmorPenetration,proto3" json:"ArmorPenetration,omitempty"`          // 护甲穿透
	CriticalStrikeRating float32 `protobuf:"fixed32,10,opt,name=CriticalStrikeRating,proto3" json:"CriticalStrikeRating,omitempty"` // 暴击率
	CriticalStrike       float32 `protobuf:"fixed32,11,opt,name=CriticalStrike,proto3" json:"CriticalStrike,omitempty"`             // 暴击伤害
	HitRating            float32 `protobuf:"fixed32,12,opt,name=HitRating,proto3" json:"HitRating,omitempty"`                       // 命中率
	HasteRation          float32 `protobuf:"fixed32,13,opt,name=HasteRation,proto3" json:"HasteRation,omitempty"`                   // 急速
	NormalRange          float32 `protobuf:"fixed32,14,opt,name=NormalRange,proto3" json:"NormalRange,omitempty"`                   // 普攻范围
	PiercingRange        float32 `protobuf:"fixed32,15,opt,name=PiercingRange,proto3" json:"PiercingRange,omitempty"`               // 穿刺范围
}

func (x *CharactorAttackAttribute) Reset() {
	*x = CharactorAttackAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactorAttackAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactorAttackAttribute) ProtoMessage() {}

func (x *CharactorAttackAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactorAttackAttribute.ProtoReflect.Descriptor instead.
func (*CharactorAttackAttribute) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{3}
}

func (x *CharactorAttackAttribute) GetNormal() float32 {
	if x != nil {
		return x.Normal
	}
	return 0
}

func (x *CharactorAttackAttribute) GetPiercing() float32 {
	if x != nil {
		return x.Piercing
	}
	return 0
}

func (x *CharactorAttackAttribute) GetFlame() float32 {
	if x != nil {
		return x.Flame
	}
	return 0
}

func (x *CharactorAttackAttribute) GetFrost() float32 {
	if x != nil {
		return x.Frost
	}
	return 0
}

func (x *CharactorAttackAttribute) GetLightning() float32 {
	if x != nil {
		return x.Lightning
	}
	return 0
}

func (x *CharactorAttackAttribute) GetPoison() float32 {
	if x != nil {
		return x.Poison
	}
	return 0
}

func (x *CharactorAttackAttribute) GetShadow() float32 {
	if x != nil {
		return x.Shadow
	}
	return 0
}

func (x *CharactorAttackAttribute) GetChaos() float32 {
	if x != nil {
		return x.Chaos
	}
	return 0
}

func (x *CharactorAttackAttribute) GetArmorPenetration() float32 {
	if x != nil {
		return x.ArmorPenetration
	}
	return 0
}

func (x *CharactorAttackAttribute) GetCriticalStrikeRating() float32 {
	if x != nil {
		return x.CriticalStrikeRating
	}
	return 0
}

func (x *CharactorAttackAttribute) GetCriticalStrike() float32 {
	if x != nil {
		return x.CriticalStrike
	}
	return 0
}

func (x *CharactorAttackAttribute) GetHitRating() float32 {
	if x != nil {
		return x.HitRating
	}
	return 0
}

func (x *CharactorAttackAttribute) GetHasteRation() float32 {
	if x != nil {
		return x.HasteRation
	}
	return 0
}

func (x *CharactorAttackAttribute) GetNormalRange() float32 {
	if x != nil {
		return x.NormalRange
	}
	return 0
}

func (x *CharactorAttackAttribute) GetPiercingRange() float32 {
	if x != nil {
		return x.PiercingRange
	}
	return 0
}

// ----------------- 人物抵抗属性 -----------------
type CharactorResistanceAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Armor      ArmorType `protobuf:"varint,1,opt,name=Armor,proto3,enum=data.ArmorType" json:"Armor,omitempty"` // 护甲类型
	Defence    float32   `protobuf:"fixed32,2,opt,name=Defence,proto3" json:"Defence,omitempty"`                // 防御力
	Flame      float32   `protobuf:"fixed32,3,opt,name=Flame,proto3" json:"Flame,omitempty"`                    // 火焰抵抗
	Frost      float32   `protobuf:"fixed32,4,opt,name=Frost,proto3" json:"Frost,omitempty"`                    // 冰霜抵抗
	Lightning  float32   `protobuf:"fixed32,5,opt,name=Lightning,proto3" json:"Lightning,omitempty"`            // 闪电抵抗
	Poison     float32   `protobuf:"fixed32,6,opt,name=Poison,proto3" json:"Poison,omitempty"`                  // 毒素抵抗
	Shadow     float32   `protobuf:"fixed32,7,opt,name=Shadow,proto3" json:"Shadow,omitempty"`                  // 暗影抵抗
	Chaos      float32   `protobuf:"fixed32,8,opt,name=Chaos,proto3" json:"Chaos,omitempty"`                    // 混沌抵抗
	Dodge      float32   `protobuf:"fixed32,9,opt,name=Dodge,proto3" json:"Dodge,omitempty"`                    // 闪躲
	Resilience float32   `protobuf:"fixed32,10,opt,name=Resilience,proto3" json:"Resilience,omitempty"`         // 韧性
	Block      float32   `protobuf:"fixed32,11,opt,name=Block,proto3" json:"Block,omitempty"`                   // 格挡
	Parry      float32   `protobuf:"fixed32,12,opt,name=Parry,proto3" json:"Parry,omitempty"`                   // 招架
}

func (x *CharactorResistanceAttribute) Reset() {
	*x = CharactorResistanceAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactorResistanceAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactorResistanceAttribute) ProtoMessage() {}

func (x *CharactorResistanceAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactorResistanceAttribute.ProtoReflect.Descriptor instead.
func (*CharactorResistanceAttribute) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{4}
}

func (x *CharactorResistanceAttribute) GetArmor() ArmorType {
	if x != nil {
		return x.Armor
	}
	return ArmorType_ArmorTypeInvalid
}

func (x *CharactorResistanceAttribute) GetDefence() float32 {
	if x != nil {
		return x.Defence
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetFlame() float32 {
	if x != nil {
		return x.Flame
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetFrost() float32 {
	if x != nil {
		return x.Frost
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetLightning() float32 {
	if x != nil {
		return x.Lightning
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetPoison() float32 {
	if x != nil {
		return x.Poison
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetShadow() float32 {
	if x != nil {
		return x.Shadow
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetChaos() float32 {
	if x != nil {
		return x.Chaos
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetDodge() float32 {
	if x != nil {
		return x.Dodge
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetResilience() float32 {
	if x != nil {
		return x.Resilience
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetBlock() float32 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *CharactorResistanceAttribute) GetParry() float32 {
	if x != nil {
		return x.Parry
	}
	return 0
}

// ----------------- 人物御属性 -----------------
type Charactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharID     int64                         `protobuf:"varint,1,opt,name=CharID,proto3" json:"CharID,omitempty"`         // 角色ID
	UserID     int64                         `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID,omitempty"`         // 所属用户
	CreateTime int64                         `protobuf:"varint,3,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` // 创建时间
	LastUpdate int64                         `protobuf:"varint,4,opt,name=LastUpdate,proto3" json:"LastUpdate,omitempty"` // 最后更新时间
	Ver        string                        `protobuf:"bytes,5,opt,name=Ver,proto3" json:"Ver,omitempty"`                // 版本
	VerCode    uint32                        `protobuf:"varint,6,opt,name=VerCode,proto3" json:"VerCode,omitempty"`       // 版本号
	Info       *CharactorBasicInfo           `protobuf:"bytes,7,opt,name=Info,proto3" json:"Info,omitempty"`              // 基础信息
	Basic      *CharactorBasicAttribute      `protobuf:"bytes,8,opt,name=Basic,proto3" json:"Basic,omitempty"`            // 基础属性
	State      *CharactorStateAttribute      `protobuf:"bytes,9,opt,name=State,proto3" json:"State,omitempty"`            // 状态属性
	Attack     *CharactorAttackAttribute     `protobuf:"bytes,10,opt,name=Attack,proto3" json:"Attack,omitempty"`         // 攻击属性
	Resistance *CharactorResistanceAttribute `protobuf:"bytes,11,opt,name=Resistance,proto3" json:"Resistance,omitempty"` // 防御属性
}

func (x *Charactor) Reset() {
	*x = Charactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charactor_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charactor) ProtoMessage() {}

func (x *Charactor) ProtoReflect() protoreflect.Message {
	mi := &file_charactor_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charactor.ProtoReflect.Descriptor instead.
func (*Charactor) Descriptor() ([]byte, []int) {
	return file_charactor_data_proto_rawDescGZIP(), []int{5}
}

func (x *Charactor) GetCharID() int64 {
	if x != nil {
		return x.CharID
	}
	return 0
}

func (x *Charactor) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Charactor) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Charactor) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Charactor) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *Charactor) GetVerCode() uint32 {
	if x != nil {
		return x.VerCode
	}
	return 0
}

func (x *Charactor) GetInfo() *CharactorBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Charactor) GetBasic() *CharactorBasicAttribute {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *Charactor) GetState() *CharactorStateAttribute {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Charactor) GetAttack() *CharactorAttackAttribute {
	if x != nil {
		return x.Attack
	}
	return nil
}

func (x *Charactor) GetResistance() *CharactorResistanceAttribute {
	if x != nil {
		return x.Resistance
	}
	return nil
}

var File_charactor_data_proto protoreflect.FileDescriptor

var file_charactor_data_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x48, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x69,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x48, 0x61,
	0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x53, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x58, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x45, 0x58, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x45, 0x56, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4c, 0x45, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x54, 0x41,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x54, 0x41, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x54, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x53, 0x54, 0x52, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x47, 0x49, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x41, 0x47, 0x49, 0x12,
	0x10, 0x0a, 0x03, 0x43, 0x4f, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x43, 0x4f,
	0x4e, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x49, 0x4e, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x43, 0x4b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x4c, 0x43, 0x4b, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x53, 0x50, 0x22, 0x59, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x48, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x48, 0x50,
	0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x4d, 0x50,
	0x12, 0x0e, 0x0a, 0x02, 0x45, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x45, 0x50,
	0x12, 0x0e, 0x0a, 0x02, 0x41, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x41, 0x50,
	0x22, 0xee, 0x03, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x50, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x72, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x50, 0x6f, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x14, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x48, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x48, 0x61,
	0x73, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x50, 0x69, 0x65, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xd1, 0x02, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x72, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x50,
	0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x69, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x52,
	0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x50, 0x61, 0x72, 0x72, 0x79, 0x22, 0xbb, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12,
	0x42, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x73, 0x73, 0x61, 0x73,
	0x73, 0x69, 0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x57, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x05, 0x2a, 0x8a, 0x01, 0x0a,
	0x09, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72,
	0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x23, 0x0a, 0x0a, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x42, 0x22,
	0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x65, 0x67,
	0x61, 0x64, 0x2f, 0x6d, 0x6d, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0xaa, 0x02, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_charactor_data_proto_rawDescOnce sync.Once
	file_charactor_data_proto_rawDescData = file_charactor_data_proto_rawDesc
)

func file_charactor_data_proto_rawDescGZIP() []byte {
	file_charactor_data_proto_rawDescOnce.Do(func() {
		file_charactor_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_charactor_data_proto_rawDescData)
	})
	return file_charactor_data_proto_rawDescData
}

var file_charactor_data_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_charactor_data_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_charactor_data_proto_goTypes = []interface{}{
	(RoleType)(0),                        // 0: data.RoleType
	(ArmorType)(0),                       // 1: data.ArmorType
	(WeaponType)(0),                      // 2: data.WeaponType
	(*CharactorBasicInfo)(nil),           // 3: data.CharactorBasicInfo
	(*CharactorBasicAttribute)(nil),      // 4: data.CharactorBasicAttribute
	(*CharactorStateAttribute)(nil),      // 5: data.CharactorStateAttribute
	(*CharactorAttackAttribute)(nil),     // 6: data.CharactorAttackAttribute
	(*CharactorResistanceAttribute)(nil), // 7: data.CharactorResistanceAttribute
	(*Charactor)(nil),                    // 8: data.Charactor
}
var file_charactor_data_proto_depIdxs = []int32{
	0, // 0: data.CharactorBasicInfo.Role:type_name -> data.RoleType
	1, // 1: data.CharactorResistanceAttribute.Armor:type_name -> data.ArmorType
	3, // 2: data.Charactor.Info:type_name -> data.CharactorBasicInfo
	4, // 3: data.Charactor.Basic:type_name -> data.CharactorBasicAttribute
	5, // 4: data.Charactor.State:type_name -> data.CharactorStateAttribute
	6, // 5: data.Charactor.Attack:type_name -> data.CharactorAttackAttribute
	7, // 6: data.Charactor.Resistance:type_name -> data.CharactorResistanceAttribute
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_charactor_data_proto_init() }
func file_charactor_data_proto_init() {
	if File_charactor_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_charactor_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactorBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charactor_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactorBasicAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charactor_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactorStateAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charactor_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactorAttackAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charactor_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactorResistanceAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charactor_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_charactor_data_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_charactor_data_proto_goTypes,
		DependencyIndexes: file_charactor_data_proto_depIdxs,
		EnumInfos:         file_charactor_data_proto_enumTypes,
		MessageInfos:      file_charactor_data_proto_msgTypes,
	}.Build()
	File_charactor_data_proto = out.File
	file_charactor_data_proto_rawDesc = nil
	file_charactor_data_proto_goTypes = nil
	file_charactor_data_proto_depIdxs = nil
}
